import random
import math
class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.weights_input_hidden = [[random.uniform(-1, 1) for _ in range(hidden_size)] for _ in range(input_size)]
        self.bias_hidden = [0] * hidden_size
        self.weights_hidden_output = [[random.uniform(-1, 1) for _ in range(output_size)] for _ in range(hidden_size)]
        self.bias_output = [0] * output_size
    def sigmoid(self, x):
        return 1 / (1 + math.exp(-x))
    def forward(self, inputs):
        if len(inputs) != self.input_size:
            raise ValueError(f"Input size mismatch. Expected {self.input_size} elements, got {len(inputs)}.")
        hidden_input = [sum(inputs[i] * self.weights_input_hidden[i][j] for i in range(self.input_size)) + self.bias_hidden[j] for j in range(self.hidden_size)]
        hidden_output = [self.sigmoid(x) for x in hidden_input]
        output_input = [sum(hidden_output[j] * self.weights_hidden_output[j][k] for j in range(self.hidden_size)) + self.bias_output[k] for k in range(self.output_size)]
        predicted_output = [self.sigmoid(x) for x in output_input]
        return predicted_output
input_size = 3
hidden_size = 4
output_size = 2
nn = NeuralNetwork(input_size, hidden_size, output_size)
input_data = [0.1, 0.2, 0.3]
predicted_output = nn.forward(input_data)
print("Predicted Output:", predicted_output)

